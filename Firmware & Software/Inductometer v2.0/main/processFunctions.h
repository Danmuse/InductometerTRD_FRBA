#ifndef _PROCESS_FUNCTIONS_H_
#define _PROCESS_FUNCTIONS_H_

#include "cardReader.h"
#include "rotaryEncoder.h"
#include "ST7789.h"

#include "processActions.h"

/// Main menu panel

#define ENCODER_LOWER_LIMIT_MENU 1 // OP_CALCULATE_INDUCTANCE
#define ENCODER_UPPER_LIMIT_MENU 3 // OP_GENERATE_SIGNALS

#define FRAME_GRAPH_HT 120
#define BACKGROUND_COLOR_MENU DEFAULT_BACKGROUND_COLOR
#define TEXT_COLOR_MENU 0xEF7D

/// Generator signal settings panel

#define MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION

#define ENCODER_LOWER_LIMIT_SIGNAL_PANEL 0 // SIG_OP_CANCEL
#define ENCODER_UPPER_LIMIT_SIGNAL_PANEL 4 // SIG_OP_SET_FREQ

#ifndef MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION
#define ENCODER_LOWER_LIMIT_SIGNAL_MULTIPLIER_OPTIONS 0 // x1
#define ENCODER_UPPER_LIMIT_SIGNAL_MULTIPLIER_OPTIONS 4 // x10000
#else
#define ENCODER_LOWER_LIMIT_SIGNAL_MULTIPLIER_OPTIONS 0 // x10^0
#define ENCODER_UPPER_LIMIT_SIGNAL_MULTIPLIER_OPTIONS 6 // x10^6
#endif // !defined(MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION)

#define ENCODER_LOWER_LIMIT_SIGNAL_SIG_TYPE_OPTIONS 0 // SINE
#define ENCODER_UPPER_LIMIT_SIGNAL_SIG_TYPE_OPTIONS 2 // TRIANG

#define ENCODER_LOWER_LIMIT_SIGNAL_FREQUENCY 1 // 1 Hz
#define ENCODER_UPPER_LIMIT_SIGNAL_FREQUENCY 12500000 // 12.5 MHz

#ifndef MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION
#define DEFAULT_SIGNAL_MULTIPLIER 1000
#else
#define DEFAULT_SIGNAL_MULTIPLIER 3
#endif // !defined(MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION)
#define DEFAULT_SIGNAL_TYPE SIG_SINE
#define DEFAULT_SIGNAL_FREQUENCY 1000

#ifndef MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION
#define MARGIN_MIDDLE_CHARTS 1
#else
#define MARGIN_MIDDLE_CHARTS 4
#endif // !defined(MULTIPLIER_EXPONENTIAL_NOTATION_REPRESENTATION)
#define MARGIN_LEFT_CENTER_MIDDLE_CHARTS SCR_WD/2+MARGIN_MIDDLE_CHARTS
#define MARGIN_FILL_OUT_CHARTS 18
#define HORIZONTAL_PADDING_MIDDLE_CHARTS 6*2+1/*MARGIN_MIDDLE_CHARTS-(MARGIN_MIDDLE_CHARTS/4)*/
#define HORIZONTAL_PADDING_FILL_OUT_CHARTS 6*2+13/*MARGIN_FILL_OUT_CHARTS-(MARGIN_FILL_OUT_CHARTS/4)*/
#define VERTICAL_PADDING_CHARTS(row) 80*(row%3)+(row%3)-1+25-8*(2*(row%2))
#define VERTICAL_POSITION_TITLE_CHARTS(row) 80*(row%3)+(row%3)-1-8*(2*(row%2))

#define HEIGHT_CHARTS 80-2
#define WIDTH_MIDDLE_CHARTS SCR_WD/2-2*MARGIN_MIDDLE_CHARTS
#define CONTENT_WIDTH_MIDDLE_CHARTS_SIZE WIDTH_MIDDLE_CHARTS-2*HORIZONTAL_PADDING_MIDDLE_CHARTS
#define WIDTH_FILL_OUT_CHARTS SCR_WD-2*MARGIN_FILL_OUT_CHARTS
#define CONTENT_WIDTH_FILL_OUT_CHARTS_SIZE WIDTH_FILL_OUT_CHARTS-2*HORIZONTAL_PADDING_FILL_OUT_CHARTS

#define MAX_MULTIPLIER_DIGITS 5
#define MAX_FREQUENCY_DIGITS 10

#define BACKGROUND_CHARTS_COLOR 0x2124 // RGB: (33, 36, 33)
#define FRAME_CHARTS_COLOR(idle) idle ? 0xB596 : 0x94D2 // RGB: (181, 178, 181) | RGB: (152, 152, 152)
#define FRAME_HOVER_CHARTS_COLOR 0xEC71 // RGB: (239, 142, 140)
#define TITLE_CHARTS_COLOR(idle) idle ? 0xE75D : 0xC67A // RGB: (230, 235, 239) | RGB: (197, 206, 214)
#define TITLE_HOVER_CHARTS_COLOR 0xEDF7 // RGB: (238, 189, 189)
#define TEXT_CHARTS_COLOR(idle) idle ? 0xEF5D : 0xCE79 // RGB: (239, 235, 239) | RGB: (206, 206, 206) 
#define PANEL_ELEMENTS_COLOR(idle) idle ? 0xBFBF : 0xF7DE // RGB: (190, 245, 255) | RGB: (247, 251, 247)
#define PANEL_ELEMENTS_INACTIVE_COLOR 0xFFF6 // RGB: (255, 255, 181)
#define PANEL_ELEMENTS_ACTIVE_COLOR(idle) idle ? 0xC7F8 : 0xEDF7 // RGB: (198, 255, 198) | RGB: (238, 189, 189)
#define FRAME_PANEL_ELEMENTS_COLOR 0x5AAB // RGB: (90, 85, 90)

/// General settings panel

#define LETTER_SPACING_SIZE DEFAULT_LETTER_SPACING_SIZE
#define MAX_SIGNAL_SETTING_SIZE 12 // Longest string to store is "12500000 Hz"

#define INACTIVE_BLINK_DIGIT_TIME 230
#define ACTIVE_BLINK_DIGIT_TIME 850

#define CARD_CONNECTION_ATTEMPTS 3

typedef enum {
  TYPE_NONE = 0,
  TYPE_UINT = 1,
  TYPE_INT = 2,
  TYPE_FLOAT = 3,
  TYPE_STRING = 4,
  TYPE_HIBRID = 5
} textTypes_t;

typedef enum {
  OP_NONE = 0,
  OP_CALCULATE_INDUCTANCE = 1,
  OP_CALCULATE_QUALITY_FACTOR = 2,
  OP_GENERATE_SIGNALS = 3
} operation_t;

typedef enum {
  SIG_OP_CANCEL = 0,
  SIG_OP_COMPLETE = 1,
  SIG_OP_SET_MULT = 2,
  SIG_OP_SET_TYPE = 3,
  SIG_OP_SET_FREQ = 4
} sig_operation_t;

extern bool cardPlugged;

void printFromSD(const char *file);
void displayMenu(operation_t &operation);
void processOperation(operation_t &operation);

void settingSignal(void);

#endif // _PROCESS_FUNCTIONS_H_
